#include <bits/stdc++.h>
using namespace std;
vector<int> v = {1,2,3};
string str = "1 2 3";
map<int,int> mp = {{1,2},{3,4}};
set<int> s = {1,2,3};
int main()
{
	// 注意，以下所有办法的效率均与正常遍历无异，只是写起来会比较方便好看
	// 这里只做认知性介绍，不要求会用，有需要使用的同学请自行练习后在代码中加入

	for(auto &itt : v) cout << itt << ' ';
	// 上述语句用于遍历vector容器，输出结果为1 2 3

	// 这种语句可以用于遍历所有支持随机访问的流和容器，itt作为指针从头到尾的，每次循环依次指向每个元素
	// v可以替换为任何支持遍历的容器的名字
	// 值得注意的是，这种写法从c++11开始支持


	// 接下来介绍一种类似的遍历
	vector<pair<int,int>> v1 = {{1,2},{2,3}};
	for(auto &[x, y]: v1)
	{
		cout << x << ' ' << y << endl;
	}
	// 上述语句输出结果为
	/*
	1 2
	3 4
	*/
	// 这种遍历办法可以遍历容器或流内的元素是二元组的情况，依次类推[x,y,z]可遍历元素为三元组的情况
	// 同时我们需要注意，这种遍历多元组的办法仅在c++17以上支持
    return 0;
}


